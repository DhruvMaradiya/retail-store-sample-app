name: Deploy

on:
  push:
    branches: [gitops]
    paths: ['src/**']
  workflow_dispatch:

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  ARTIFACT_REGISTRY_LOCATION: ${{ secrets.ARTIFACT_REGISTRY_LOCATION }}
  ARTIFACT_REGISTRY_REPOSITORY: demo-private

jobs:
  detect-changes:
    name: Detect Changed Services
    runs-on: ubuntu-latest
    outputs:
      changed-services: ${{ steps.changes.outputs.changed-services }}
      matrix: ${{ steps.changes.outputs.matrix }}
      has-changes: ${{ steps.changes.outputs.has-changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: changes
        run: |
          SERVICES=("ui" "catalog" "cart" "checkout")
          CHANGED_SERVICES=()
          for service in "${SERVICES[@]}"; do
            if git diff --name-only HEAD~1 HEAD | grep -q "^src/$service/" || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              CHANGED_SERVICES+=("$service")
            fi
          done
          if [ ${#CHANGED_SERVICES[@]} -eq 0 ]; then
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          MATRIX_JSON=$(printf ',"%s"' "${CHANGED_SERVICES[@]}" | cut -c2-)
          echo "changed-services=${CHANGED_SERVICES[*]}" >> $GITHUB_OUTPUT
          echo "matrix={\"service\":[$MATRIX_JSON]}" >> $GITHUB_OUTPUT
          echo "has-changes=true" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has-changes == 'true'
    permissions:
      contents: write
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (JSON key)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev

      - name: Build and push ${{ matrix.service }}
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          ARTIFACT_REPO="${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}/${SERVICE}"
          
          # Create Artifact Registry repo if missing
          gcloud artifacts repositories describe ${{ env.ARTIFACT_REGISTRY_REPOSITORY }} \
            --location=${{ env.ARTIFACT_REGISTRY_LOCATION }} 2>/dev/null || \
          gcloud artifacts repositories create ${{ env.ARTIFACT_REGISTRY_REPOSITORY }} \
            --repository-format=docker \
            --location=${{ env.ARTIFACT_REGISTRY_LOCATION }} \
            --description="Private container registry for retail-store microservices"
          
          # Build & push
          docker build -t "${ARTIFACT_REPO}:${TAG}" -t "${ARTIFACT_REPO}:latest" "src/${SERVICE}/"
          docker push "${ARTIFACT_REPO}:${TAG}"
          docker push "${ARTIFACT_REPO}:latest"
          
          echo "ARTIFACT_REPO=${ARTIFACT_REPO}" >> $GITHUB_ENV

      - name: Update Helm values for ${{ matrix.service }}
        run: |
          SERVICE="${{ matrix.service }}"
          TAG="$(echo ${{ github.sha }} | cut -c1-7)"
          ARTIFACT_REPO="${{ env.ARTIFACT_REPO }}"
          VALUES_FILE="src/${SERVICE}/chart/values.yaml"
          
          # update only the main service image (first 'image:' section)
          awk -v repo="$ARTIFACT_REPO" -v tag="$TAG" '
          BEGIN { in_main_image = 0; updated_repo = 0; updated_tag = 0 }
          /^image:/ { in_main_image = 1; print; next }
          in_main_image && /^[[:space:]]*repository:/ && !updated_repo { 
            print "  repository: " repo; updated_repo = 1; next 
          }
          in_main_image && /^[[:space:]]*tag:/ && !updated_tag { 
            print "  tag: \"" tag "\""; updated_tag = 1; next 
          }
          /^[a-zA-Z]/ && !/^image:/ { in_main_image = 0 }
          { print }
          ' "$VALUES_FILE" > "$VALUES_FILE.tmp" && mv "$VALUES_FILE.tmp" "$VALUES_FILE"
          
          git config user.name "GitOps Bot"
          git config user.email "gitops@github.com"
          git add "src/${SERVICE}/chart/values.yaml"
          git commit -m "🚀 Update ${SERVICE} Helm chart to ${TAG} - Artifact Registry: demo-private/${SERVICE} - Commit: ${{ github.sha }}"
          
          # push with retry
          for i in {1..3}; do
            git push origin gitops && break || (git pull --rebase origin gitops && sleep 2)
          done

  summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** gitops" >> $GITHUB_STEP_SUMMARY
          echo "**Artifact Registry:** ${{ env.ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.ARTIFACT_REGISTRY_REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ **Status:** Deployment successful" >> $GITHUB_STEP_SUMMARY
            echo "- 🔨 Built and pushed Docker images to Artifact Registry" >> $GITHUB_STEP_SUMMARY
            echo "- 📝 Updated Helm chart values" >> $GITHUB_STEP_SUMMARY
            echo "- 💾 Committed changes to repository" >> $GITHUB_STEP_SUMMARY
            echo "- 🔄 ArgoCD will sync automatically" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Status:** Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
